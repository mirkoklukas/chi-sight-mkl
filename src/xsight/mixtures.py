# AUTOGENERATED! DO NOT EDIT! File to edit: ../../notebooks/88 - Mixtures.ipynb.

# %% auto 0
__all__ = ['key', 'HeterogeneousMixture']

# %% ../../notebooks/88 - Mixtures.ipynb 1
import jax
import jax.numpy as jnp
from jax import jit
import genjax
from genjax import gen
from genjax.generative_functions.distributions import ExactDensity, Distribution
from dataclasses import dataclass
import numpy as np
from functools import partial
import matplotlib.pyplot as plt

key = jax.random.PRNGKey(0)

# %% ../../notebooks/88 - Mixtures.ipynb 5
class HeterogeneousMixture(ExactDensity):
    def __init__(self, dists, *args, **kwargs):        
        assert isinstance(dists, list)
        assert all([isinstance(d, Distribution) for d in dists])        

        self.dists = dists
        super().__init__(*args, **kwargs)

    def sample(self, key, ws, args):
        _,key = jax.random.split(key)
        i = genjax.categorical.sample(key, jnp.array(ws))
        key, = jax.random.split(key,1)

        sampler = lambda d,a: lambda k: d.sample(k, *a)
        distr_branches = [sampler(d,a) for d,a in zip(self.dists, args)]
    
        return jax.lax.switch(i, distr_branches, key)

    def logpdf(self, x, ws, args):
        logps  = jnp.array([d.logpdf(x, *a) for d,a in zip(self.dists, args)])
        logps += jnp.log(ws)
        logp  = jax.scipy.special.logsumexp(logps)
        return logp
    
    def flatten(self):
        return (self.dists,), ()
    
    def __str__(self):
        s = ", ".join([
            f"{str(d):.12s}{'.'*3*(len(str(d))>12)}" 
                for d in self.dists])
        return f"HeterogeneousMixture({s})"
